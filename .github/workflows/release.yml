name: Release

on:
  push:
    branches:
      - 'main'

  workflow_dispatch:
    inputs:
      latest:
        description: Tag the latest release
        required: false
        default: 'false'
      suffix:
        description: Suffix for the version tag appended to the JRE version, SNAPSHOT already appended for builds on non-default branches (main)
        required: true
        default: 'rc1'

jobs:
  verify-release:
    # Stop automatic release if the tag already exists
    name: Verify Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Get tag name
      id: get-tag
      run: |
        tagName=v$(cat .java-version)
        if [ "${{ inputs.suffix }}" != "" ]; then
          tagName=$tagName-${{ inputs.suffix }}
        fi
        releases=$(gh release list --limit 10)
        if echo "$releases" | grep -F -q -- "$tagName"; then
          error "Release ${tagName} already exists."
        fi
        echo "Tag is $tagName"
        echo "tagName=$tagName" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      tagName: ${{ steps.get-tag.outputs.tagName }}

  build-deploy:
    name: Build and Deploy
    needs: verify-release
    uses: ./.github/workflows/build-deploy.yml
    with:
      deploy: true
      suffix: ${{ inputs.suffix || '' }}

  tag-latest:
    name: Set Latest Release
    needs: build-deploy
    if: ${{ inputs.latest == 'true' || github.event_name == 'push' }}
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
    -
      name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Search latest semver Image
      uses: tinact/docker.image-retag@1.0.3
      with:
        image_name: ${{ needs.build-deploy.outputs.dockerRepository }}
        image_old_tag: ${{ needs.build-deploy.outputs.dockerTag }}
        image_new_tag: latest
        registry: ${{ needs.build-deploy.outputs.dockerRegistry }}
        registry_username: ${{ github.actor }}
        registry_password: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Create GitHub Release
    needs:
      - verify-release
      - build-deploy
    runs-on: ubuntu-latest

    env:
      DOCKER_TAG: ${{ needs.build-deploy.outputs.dockerTag }}
      JRE_MAVEN_VERSION: ${{ needs.build-deploy.outputs.jreMavenVersion }}
      TAG_NAME: ${{ needs.verify-release.outputs.tagName }}

    steps:
    - name: Control tag
      run: |
        if [ -z "${{ env.TAG_NAME }}" ]; then
          error "Missing tag name for release"
        fi

    - name: Checkout code
      uses: actions/checkout@v5

    - name: Configure Git User
      run: |
        git config user.email "actions@github.com"
        git config user.name "GitHub Actions"

    - name: Clean up existing ${{ env.TAG_NAME }} tags
      run: |
        git tag -d ${{ env.TAG_NAME }} || true
        git push origin :refs/tags/${{ env.TAG_NAME }} || true

    - name: Create tag ${{ env.TAG_NAME }}
      run: |
        git tag -a ${{ env.TAG_NAME }} -m "Release ${{ env.TAG_NAME }}"
        git push origin ${{ env.TAG_NAME }}

    - name: Create release notes
      run: |
        CURRENT_VERSION=$(cat .java-version | sed 's/+/_/g')
        sed -i "s/:${CURRENT_VERSION}/:${{ env.DOCKER_TAG }}/g" README.md
        sed -i "s/>${CURRENT_VERSION}/>${{ env.JRE_MAVEN_VERSION }}/g" README.md
        echo "Replace ${CURRENT_VERSION} with ${{ env.JRE_MAVEN_VERSION }} in README to be used as release notes"

    - name: Create a GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.TAG_NAME }}
        body_path: README.md
        make_latest: true
